// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jtolds/changesetchihuahua/messages (interfaces: ChatSystem)

// Package app_test is a generated GoMock package.
package app_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	messages "github.com/jtolds/changesetchihuahua/messages"
	reflect "reflect"
)

// MockChatSystem is a mock of ChatSystem interface
type MockChatSystem struct {
	ctrl     *gomock.Controller
	recorder *MockChatSystemMockRecorder
}

// MockChatSystemMockRecorder is the mock recorder for MockChatSystem
type MockChatSystemMockRecorder struct {
	mock *MockChatSystem
}

// NewMockChatSystem creates a new mock instance
func NewMockChatSystem(ctrl *gomock.Controller) *MockChatSystem {
	mock := &MockChatSystem{ctrl: ctrl}
	mock.recorder = &MockChatSystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChatSystem) EXPECT() *MockChatSystemMockRecorder {
	return m.recorder
}

// GetInstallingUser mocks base method
func (m *MockChatSystem) GetInstallingUser(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstallingUser", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstallingUser indicates an expected call of GetInstallingUser
func (mr *MockChatSystemMockRecorder) GetInstallingUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstallingUser", reflect.TypeOf((*MockChatSystem)(nil).GetInstallingUser), arg0)
}

// GetUserInfoByID mocks base method
func (m *MockChatSystem) GetUserInfoByID(arg0 context.Context, arg1 string) (messages.ChatUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoByID", arg0, arg1)
	ret0, _ := ret[0].(messages.ChatUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoByID indicates an expected call of GetUserInfoByID
func (mr *MockChatSystemMockRecorder) GetUserInfoByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoByID", reflect.TypeOf((*MockChatSystem)(nil).GetUserInfoByID), arg0, arg1)
}

// InformBuildAborted mocks base method
func (m *MockChatSystem) InformBuildAborted(arg0 context.Context, arg1 messages.MessageHandle, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InformBuildAborted", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InformBuildAborted indicates an expected call of InformBuildAborted
func (mr *MockChatSystemMockRecorder) InformBuildAborted(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InformBuildAborted", reflect.TypeOf((*MockChatSystem)(nil).InformBuildAborted), arg0, arg1, arg2)
}

// InformBuildFailure mocks base method
func (m *MockChatSystem) InformBuildFailure(arg0 context.Context, arg1 messages.MessageHandle, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InformBuildFailure", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InformBuildFailure indicates an expected call of InformBuildFailure
func (mr *MockChatSystemMockRecorder) InformBuildFailure(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InformBuildFailure", reflect.TypeOf((*MockChatSystem)(nil).InformBuildFailure), arg0, arg1, arg2)
}

// InformBuildStarted mocks base method
func (m *MockChatSystem) InformBuildStarted(arg0 context.Context, arg1 messages.MessageHandle, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InformBuildStarted", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InformBuildStarted indicates an expected call of InformBuildStarted
func (mr *MockChatSystemMockRecorder) InformBuildStarted(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InformBuildStarted", reflect.TypeOf((*MockChatSystem)(nil).InformBuildStarted), arg0, arg1, arg2)
}

// InformBuildSuccess mocks base method
func (m *MockChatSystem) InformBuildSuccess(arg0 context.Context, arg1 messages.MessageHandle, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InformBuildSuccess", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InformBuildSuccess indicates an expected call of InformBuildSuccess
func (mr *MockChatSystemMockRecorder) InformBuildSuccess(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InformBuildSuccess", reflect.TypeOf((*MockChatSystem)(nil).InformBuildSuccess), arg0, arg1, arg2)
}

// LookupChannelByName mocks base method
func (m *MockChatSystem) LookupChannelByName(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupChannelByName", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupChannelByName indicates an expected call of LookupChannelByName
func (mr *MockChatSystemMockRecorder) LookupChannelByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupChannelByName", reflect.TypeOf((*MockChatSystem)(nil).LookupChannelByName), arg0, arg1)
}

// LookupUserByEmail mocks base method
func (m *MockChatSystem) LookupUserByEmail(arg0 context.Context, arg1 string) (messages.ChatUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(messages.ChatUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupUserByEmail indicates an expected call of LookupUserByEmail
func (mr *MockChatSystemMockRecorder) LookupUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupUserByEmail", reflect.TypeOf((*MockChatSystem)(nil).LookupUserByEmail), arg0, arg1)
}

// SendChannelNotification mocks base method
func (m *MockChatSystem) SendChannelNotification(arg0 context.Context, arg1, arg2 string) (messages.MessageHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendChannelNotification", arg0, arg1, arg2)
	ret0, _ := ret[0].(messages.MessageHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendChannelNotification indicates an expected call of SendChannelNotification
func (mr *MockChatSystemMockRecorder) SendChannelNotification(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendChannelNotification", reflect.TypeOf((*MockChatSystem)(nil).SendChannelNotification), arg0, arg1, arg2)
}

// SendChannelReport mocks base method
func (m *MockChatSystem) SendChannelReport(arg0 context.Context, arg1, arg2 string, arg3 []string) (messages.MessageHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendChannelReport", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(messages.MessageHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendChannelReport indicates an expected call of SendChannelReport
func (mr *MockChatSystemMockRecorder) SendChannelReport(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendChannelReport", reflect.TypeOf((*MockChatSystem)(nil).SendChannelReport), arg0, arg1, arg2, arg3)
}

// SendNotification mocks base method
func (m *MockChatSystem) SendNotification(arg0 context.Context, arg1, arg2 string) (messages.MessageHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotification", arg0, arg1, arg2)
	ret0, _ := ret[0].(messages.MessageHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendNotification indicates an expected call of SendNotification
func (mr *MockChatSystemMockRecorder) SendNotification(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockChatSystem)(nil).SendNotification), arg0, arg1, arg2)
}

// SendPersonalReport mocks base method
func (m *MockChatSystem) SendPersonalReport(arg0 context.Context, arg1, arg2 string, arg3 []string) (messages.MessageHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPersonalReport", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(messages.MessageHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPersonalReport indicates an expected call of SendPersonalReport
func (mr *MockChatSystemMockRecorder) SendPersonalReport(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPersonalReport", reflect.TypeOf((*MockChatSystem)(nil).SendPersonalReport), arg0, arg1, arg2, arg3)
}

// SetIncomingMessageCallback mocks base method
func (m *MockChatSystem) SetIncomingMessageCallback(arg0 func(string, string, bool, string) string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIncomingMessageCallback", arg0)
}

// SetIncomingMessageCallback indicates an expected call of SetIncomingMessageCallback
func (mr *MockChatSystemMockRecorder) SetIncomingMessageCallback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIncomingMessageCallback", reflect.TypeOf((*MockChatSystem)(nil).SetIncomingMessageCallback), arg0)
}

// UnmarshalMessageHandle mocks base method
func (m *MockChatSystem) UnmarshalMessageHandle(arg0 string) (messages.MessageHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalMessageHandle", arg0)
	ret0, _ := ret[0].(messages.MessageHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnmarshalMessageHandle indicates an expected call of UnmarshalMessageHandle
func (mr *MockChatSystemMockRecorder) UnmarshalMessageHandle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalMessageHandle", reflect.TypeOf((*MockChatSystem)(nil).UnmarshalMessageHandle), arg0)
}
